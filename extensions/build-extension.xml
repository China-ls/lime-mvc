<project name="extension">
	
	<!--============== PATHS & PROPERTIES ==============-->
	

	<property environment="env"/>
	<property name="lime-root" value="./../.."/>	
	<property file="${lime-root}/build.properties"/>
	<property file="./extension.properties"/>	
		
	<property name="classes"           value="${lime-root}/target/classes/${extension}" />
	<property name="classes.test"      value="${lime-root}/target/classes/${extension}-test" />
	<property name="classes.lime"      value="${lime-root}/target/classes/java" />
	<property name="classes.lime.test" value="${lime-root}/target/classes/test" />
	<property name="test.out"          value="${lime-root}/target/${extension}-testout" />
	<property name="doc.out"           value="${lime-root}/target/${extension}-doc" />
	
	<property name="jar.output"     value="${lime-root}/${name.project}-${extension}.jar" />
	<property name="jar.output.src" value="${lime-root}/${name.project}-${extension}-src.jar" />
	
	<property name="java.src"   value="./src/" />
	<property name="java.test"  value="./test/" />
	
	<property name="lib" value="${lime-root}/lib" />
	<property name="java.lib" value="${lib}/java" />
	<property name="system.lib" value="${lib}/system" />
	<property name="test.lib" value="${lib}/test" />
	<property name="lime.lib" value="${lime-root}/classes/java" />
	
	<!--================ INITIALIZATION ================-->

	<target name="version-env" if="env.LIME_VERSION">
		<property name="lime.version" value="${env.LIME_VERSION}"/>
	</target>

	<target name="version-file" unless="env.LIME_VERSION">
		<property name="lime.version" value="${version.project}" />
	</target>
	
	<target name="init" depends="version-env, version-file">
		<mkdir dir="${classes}"/>
		<mkdir dir="${classes.test}"/>
		
		<taskdef name="testng" classname="org.testng.TestNGAntTask" >
			<classpath>
				<fileset dir="${test.lib}">
				<include name="*.jar"/>
				</fileset>
			</classpath>			
		</taskdef>
	</target>
		
	<!--================ COMPILATION ================-->
	
	<target name="compile-java" depends="init">
		<javac srcdir="${java.src}" destdir="${classes}" debug="${java.debug}" includeantruntime="false">
			<classpath>
				<pathelement location="${classes}" />
				<pathelement location="${classes.lime}" />
				<fileset dir="${java.lib}"><include name="*.jar"/></fileset>
				<fileset dir="${system.lib}"><include name="*.jar"/></fileset>
			</classpath>
		</javac>
	</target>
	
	<target name="compile-java-test" depends="compile-java" >
		<javac srcdir="${java.test}" destdir="${classes.test}" debug="${java.debug}" includeantruntime="false">
			<classpath>
				<pathelement location="${classes}" />
				<pathelement location="${classes.lime}" />
				<pathelement location="${classes.lime.test}" />
				<pathelement location="${classes.test}" />
				<fileset dir="${java.lib}"><include name="*.jar"/></fileset>
				<fileset dir="${system.lib}"><include name="*.jar"/></fileset>
				<fileset dir="${test.lib}"><include name="*.jar"/></fileset>
			</classpath>			
		</javac>
		<copy todir="${classes.test}">
			<fileset dir="${java.test}" />			
		</copy>
	</target>
	
	
	<!--================ TESTING ================-->

	<target name="test" depends="compile-java-test" description="make a distribution and test it">
		<mkdir dir="${test.out}" />
		<testng outputdir="${test.out}" workingDir="." haltonfailure="true" >
			<classpath>
				<pathelement location="${classes}" />
				<pathelement location="${classes.lime}" />
				<pathelement location="${classes.lime.test}" />
				<pathelement location="${classes.test}" />
				<fileset dir="${java.lib}"><include name="*.jar"/></fileset>
				<fileset dir="${system.lib}"><include name="*.jar"/></fileset>
				<fileset dir="${test.lib}"><include name="*.jar"/></fileset>
			</classpath>
			<xmlfileset dir="." includes="testng.xml"/>	
		</testng>
	</target>
	
	<!--================ PACKAGING ================-->
	
	<target name="dist" depends="test, osgi-bundle" description="make a distribution">
		<!--<jar jarfile="${jar.output}" basedir="${classes}"/>-->
		<jar jarfile="${jar.output.src}" basedir="${java.src}"/>
	</target>

	<target name="osgi-bundle">
		<taskdef resource="aQute/bnd/ant/taskdef.properties">
			<classpath>
				<fileset dir="${system.lib}">
				<include name="*.jar"/>
			</fileset>
			</classpath>
		</taskdef>

		<mkdir dir="osgi"/>
		<copy todir="osgi">
 			<fileset dir="${classes}" />
 		</copy>

		<property name="imports" value=""/>
		<property name="Bundle-Name" value="org.zdevra.lime.${extension}"/>
	   <property name="Bundle-SymbolicName" value="org.zdevra.lime.${extension}"/>
	   <property name="Bundle-Version" value="${lime.version}"/>

	   <property name="Bundle-Description" value="Extension for Lime MVC"/>
	   <property name="Bundle-DocURL" value="http://docs.zdenkovrabel.org"/>
	   <property name="Bundle-Copyright" value="Copyright (C) 2011 Zdenko Vrabel"/>
	   <property name="Bundle-License" value="http://www.apache.org/licenses/LICENSE-2.0.txt"/>
	   <property name="Bundle-RequiredExecutionEnvironment" value="J2SE-1.5,JavaSE-1.6"/>
	   <property name="Bundle-Vendor" value="Zdenko Vrabel"/>

	   <property name="Export-Package" value="org.zdevra.guice.mvc.*;version=${lime.version}"/>
		<property name="Import-Package" value="!org.zdevra.guice.mvc.*,*" />
		<property name="Fragment-Host"  value="org.zdevra.lime" />
	    		
		<property name="-nouses" value="true"/>
		<property name="-removeheaders" value="Bnd-LastModified,Ignore-Package,Include-Resource,Private-Package,Tool"/>
	    	
		<bndwrap jars="./osgi/" output="./../../${name.project}-${extension}.jar" />
		
		<delete dir="./osgi" />
	</target>

</project>
